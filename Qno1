Q1. What are conditional statements? Explain conditional statements with syntax and examples.
->
Conditional statements in JavaScript are fundamental constructs that allow a program to execute different code paths based on certain conditions. They enable decision-making in the code by testing specific conditions and performing actions accordingly. This helps in creating dynamic and interactive programs that can respond to different inputs or states.

### Types of Conditional Statements

#### 1. **`if` Statement**

The `if` statement is used to execute a block of code only if a specified condition is true.

**Syntax:**

```javascript
if (condition) {
  // code to be executed if the condition is true
}
```

**Explanation:**

- The condition is an expression that evaluates to a Boolean value (`true` or `false`). 
- If the condition is true, the code inside the curly braces `{}` is executed.

**Example:**

```javascript
let temperature = 30;

if (temperature > 25) {
  console.log("It's a hot day!");
}
```

In this example, the message "It's a hot day!" is printed only if the `temperature` is greater than 25.

#### 2. **`if...else` Statement**

The `if...else` statement provides an alternative block of code to execute when the `if` condition is false. This allows handling two possible outcomes.

**Syntax:**

```javascript
if (condition) {
  // code to be executed if the condition is true
} else {
  // code to be executed if the condition is false
}
```

**Explanation:**

- The `else` block is executed when the `if` condition is false, providing an alternative path of execution.

**Example:**

```javascript
let age = 16;

if (age >= 18) {
  console.log("You are eligible to vote.");
} else {
  console.log("You are not eligible to vote.");
}
```

Here, the program checks if `age` is 18 or older. If true, it prints the first message; otherwise, it prints the second message.

#### 3. **`else if` Ladder**

The `else if` ladder allows you to check multiple conditions sequentially. It is useful when there are more than two possible outcomes.

**Syntax:**

```javascript
if (condition1) {
  // code to be executed if condition1 is true
} else if (condition2) {
  // code to be executed if condition2 is true
} else {
  // code to be executed if all conditions are false
}
```

**Explanation:**

- Each `else if` checks a new condition if the previous conditions are false.
- The final `else` acts as a default case when none of the conditions are true.

**Example:**

```javascript
let score = 75;

if (score >= 90) {
  console.log("Grade: A");
} else if (score >= 80) {
  console.log("Grade: B");
} else if (score >= 70) {
  console.log("Grade: C");
} else {
  console.log("Grade: F");
}
```

This example assigns a grade based on the `score`. It checks each condition in sequence and executes the corresponding block once a true condition is found.

#### 4. **Nested `if` Statements**

Nested `if` statements are `if` statements inside another `if` or `else` block, allowing for more complex decision-making processes.

**Syntax:**

```javascript
if (condition1) {
  if (condition2) {
    // code to be executed if both condition1 and condition2 are true
  }
}
```

**Explanation:**

- Allows checking for a secondary condition only if the primary condition is true.

**Example:**

```javascript
let num = 8;

if (num > 0) {
  console.log("Positive number");

  if (num % 2 === 0) {
    console.log("Even number");
  }
}
```

In this example, the program first checks if `num` is positive. If true, it then checks if `num` is even, allowing for complex logical structures.

#### 5. **`switch` Statement**

The `switch` statement is used when you want to perform different actions based on the value of a single variable or expression. It provides a more readable way to handle multiple discrete cases compared to an `if...else if` ladder.

**Syntax:**

```javascript
switch (expression) {
  case value1:
    // code to be executed if expression === value1
    break;
  case value2:
    // code to be executed if expression === value2
    break;
  // more cases
  default:
    // code to be executed if none of the cases match
}
```

**Explanation:**

- The expression is evaluated once, and its value is compared with the values of each case.
- If a case matches the expression, the code associated with that case is executed.
- The `break` statement prevents the execution from falling through to the next case.
- The `default` case is optional and executed if no case matches the expression.

**Example:**

```javascript
let day = 3;
let dayName;

switch (day) {
  case 1:
    dayName = "Monday";
    break;
  case 2:
    dayName = "Tuesday";
    break;
  case 3:
    dayName = "Wednesday";
    break;
  case 4:
    dayName = "Thursday";
    break;
  case 5:
    dayName = "Friday";
    break;
  case 6:
    dayName = "Saturday";
    break;
  case 7:
    dayName = "Sunday";
    break;
  default:
    dayName = "Invalid day";
}

console.log(dayName); // Output: Wednesday
```

In this example, the `switch` statement checks the value of `day` and assigns the corresponding day name to `dayName`. If `day` does not match any case, it assigns "Invalid day".